stages:
  - build
  - package

compile:
  stage: build

  image: docker:19.03.1
  
  services:
    - docker:19.03.1-dind

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

  script:
    - echo "Building new bfs docker image ..."
    - docker pull $CI_REGISTRY_IMAGE:latest
    - docker build --cache-from $CI_REGISTRY_IMAGE -t $CI_REGISTRY_IMAGE . &>build/build.log
    - docker push $CI_REGISTRY_IMAGE

  artifacts:
    paths:
      - build/build.log

bundle:
  stage: package
  
  image: docker:19.03.1
  
  services:
    - docker:19.03.1-dind
  
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

  script:
    - echo "Collecting bfs binaries and bundling into debian package..."
    - docker run --name bfs-collection $CI_REGISTRY_IMAGE /bin/bash -c "source /sgxsdk/environment && make -C /bfs/build clean all &>/bfs/build/pack.log && cd /bfs/build && mkdir -p bfs-dist/opt/bfs && mkdir -p bfs-dist/DEBIAN && cp -r bin bfs-dist/opt/bfs && cp deb/control bfs-dist/DEBIAN && dpkg-deb --build bfs-dist"
    - docker cp bfs-collection:/bfs/build/bfs-dist.deb build/bfs-dist.deb
    - docker cp bfs-collection:/bfs/build/pack.log build/pack.log

  artifacts:
    paths:
      - build/bfs-dist.deb
      - build/pack.log
